/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1912                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         steadyState;
}

gradSchemes
{
    default         Gauss linear;
    grad(yPsi)      cellLimited Gauss linear 1.0;
    grad(k)         cellLimited Gauss linear 1.0;
    grad(omega)     cellLimited Gauss linear 1.0;
}

divSchemes
{
    default         none;
    div(phi,U)      bounded Gauss linearUpwind grad(U);
    div(phi,k)      bounded Gauss linearUpwind grad(k);
    div(phi,omega)  bounded Gauss linearUpwind grad(omega); 
    div(phi,nuTilda) bounded Gauss linearUpwind grad(nuTilda);
    div((nuEff*dev2(T(grad(U)))))  Gauss linear;

}

laplacianSchemes
{
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         corrected;
}

fluxRequired
{
    default         no;
    pcorr           ;
    p               ;
    yPsi            ;
}

oversetInterpolation
{
    //method	      cellVolumeWeight;
    method          inverseDistance;
    //method          leastSquares;

    // The inverseDistance method uses a 'voxel' like search structure.
    // Optionally specify the extent and number of divisions n.
    // Note that it will allocate an array of nx*ny*nz. If not specified:
    // - searchBox          : local mesh bounding box
    // - searchBoxDivisions : root (2D) or cube-root(3D) of number of cells
    //searchBox           (0 0 0)(0.01 0.01 0.01);
    //searchBoxDivisions  (100 100 1);

    //layerRelax 0.3;
}

/*
cellVolumeWeight
inverseDistance
leastSquares
trackingInverseDistance
*/


// Any additional fields that require overset interpolation
/*
oversetInterpolationRequired
{
//Fields to be interpolated explicitly
    //omega;
    //k;
    //nut;
}
*/

oversetInterpolationSuppressed
{
}


wallDist
{
    method          Poisson;
    correctWalls    true;
}

// ************************************************************************* //
